{"_id":{"$oid":"5e50aa8af2473e16f3189e95"},"title":"Programs are abstract data types","authors":[{"name":"M. Erwig","affiliation":"Oregon State Univ., Corvallis, OR, USA","firstName":"M.","lastName":"Erwig","id":"37282913600"}],"abstract":"We propose to view programs as abstract data types and to perform program changes by applying well-defined operations on programs. The ADT view of programs goes beyond the approach of syntax-directed editors and proof-editors since it is possible to combine basic update operations into larger update programs that can be stored and reused. It is crucial for the design of update operations and their composition to know which properties they can preserve when they are applied to a program. The author argues in favor of the abstract data type view of programs, and presents a general framework in which different programming languages, update languages, and properties can be studied.","publicationTitle":"Proceedings 16th Annual International Conference on Automated Software Engineering (ASE 2001)","doi":"10.1109/ASE.2001.989838","publicationYear":"2001","metrics":{"citationCountPaper":{"$numberInt":"2"},"citationCountPatent":{"$numberInt":"0"},"totalDownloads":{"$numberInt":"46"}},"keywords":["Costs","Calculus","Computer languages","Software maintenance","Programming profession","Program processors","Error correction","Reactive power","Synthesizers","Pattern matching"],"references":[{"order":"1","text":"N. Bjørner, \"Type Checking Meta Programs\", <em>Workshop on Logical Frameworks and MetaLaneuazes.</em>, 1999.","title":"Type Checking Meta Programs","context":[{"sec":"sec1","text":" Related to our approach is the work by Bjørner who has investigated a simple two-level lambda calculus that offers constructs to generate and to inspect (by pattern matching) lambda calculus terms [1].","part":"1"}],"googleScholarLink":"https://scholar.google.com/scholar?as_q=Type+Checking+Meta+Programs&as_occt=title&hl=en&as_sdt=0%2C31","refType":"biblio","id":"ref1"},{"order":"2","text":"P. Borras, D. Clement, T. Despereaux, J. Incerpi, G. Kahn, B. Lang, V. Pascual, \"Centaur: The System\", <em>3rd ACM SIGSOFT Symp. on Software Development Environments</em>, pp. 14-24, 1988.","title":"Centaur: The System","context":[{"sec":"sec1","text":" Examples for such systems are Centaur [2], the synthesizer generator [3], or CYNTHIA [5].","part":"1"}],"links":{"acmLink":"https://doi.org/10.1145/64135.65005","openUrlImgLoc":"/assets/img/btn.find-in-library.png"},"googleScholarLink":"https://scholar.google.com/scholar?as_q=Centaur%3A+The+System&as_occt=title&hl=en&as_sdt=0%2C31","refType":"biblio","id":"ref2"},{"order":"3","text":"T. W. Reps, T. Teitelbaum, \"The Synthesizer Generator: A System for Constructing Language-Based Editors\" in , New York:Springer-Verlag, 1989.","title":"The Synthesizer Generator: A System for Constructing Language-Based Editors","context":[{"sec":"sec1","text":" Examples for such systems are Centaur [2], the synthesizer generator [3], or CYNTHIA [5].","part":"1"}],"links":{"crossRefLink":"https://doi.org/10.1007/978-1-4613-9623-9","openUrlImgLoc":"/assets/img/btn.find-in-library.png"},"googleScholarLink":"https://scholar.google.com/scholar?as_q=The+Synthesizer+Generator%3A+A+System+for+Constructing+Language-Based+Editors&as_occt=title&hl=en&as_sdt=0%2C31","refType":"biblio","id":"ref3"},{"order":"4","text":"E. Visser, Z. Benaissa, A. Tolmach, \"Building Program Optimizers with Rewriting Strategies\", <em>3rd ACM Int. Conf. on Functional Programming</em>, pp. 13-26, 1998.","title":"Building Program Optimizers with Rewriting Strategies","context":[{"sec":"sec4","text":" The update language has to be extended by recursion operators and by “congruence operators” [4] that allow to move updates along specific paths of abstract syntax trees.","part":"1"}],"links":{"acmLink":"https://doi.org/10.1145/289423.289425","openUrlImgLoc":"/assets/img/btn.find-in-library.png"},"googleScholarLink":"https://scholar.google.com/scholar?as_q=Building+Program+Optimizers+with+Rewriting+Strategies&as_occt=title&hl=en&as_sdt=0%2C31","refType":"biblio","id":"ref4"},{"order":"5","text":"J. Whittle, A. Bundy, H. Lowe, \"An Editor for Helping Novices to Learn Standard ML\", <em>14th Int. Conf. on Automated Software Engineering</em>, 1999.","title":"An Editor for Helping Novices to Learn Standard ML","context":[{"sec":"sec1","text":" Examples for such systems are Centaur [2], the synthesizer generator [3], or CYNTHIA [5].","part":"1"}],"googleScholarLink":"https://scholar.google.com/scholar?as_q=An+Editor+for+Helping+Novices+to+Learn+Standard+ML&as_occt=title&hl=en&as_sdt=0%2C31","refType":"biblio","id":"ref5"}],"conferenceName":"ASE","link":"https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=989838"}
